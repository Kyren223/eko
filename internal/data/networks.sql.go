// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: networks.sql

package data

import (
	"context"

	"github.com/kyren223/eko/pkg/snowflake"
)

const createNetwork = `-- name: CreateNetwork :one
INSERT INTO networks (
  id, name, owner_id
) VALUES (
  ?, ?, ?
)
RETURNING id, owner_id, name, icon, bg_hex_color, fg_hex_color, is_public
`

type CreateNetworkParams struct {
	ID      snowflake.ID
	Name    string
	OwnerID snowflake.ID
}

func (q *Queries) CreateNetwork(ctx context.Context, arg CreateNetworkParams) (Network, error) {
	row := q.db.QueryRowContext(ctx, createNetwork, arg.ID, arg.Name, arg.OwnerID)
	var i Network
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Icon,
		&i.BgHexColor,
		&i.FgHexColor,
		&i.IsPublic,
	)
	return i, err
}

const getNetwork = `-- name: GetNetwork :one
SELECT id, owner_id, name, icon, bg_hex_color, fg_hex_color, is_public FROM networks
WHERE id = ?
`

func (q *Queries) GetNetwork(ctx context.Context, id snowflake.ID) (Network, error) {
	row := q.db.QueryRowContext(ctx, getNetwork, id)
	var i Network
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Icon,
		&i.BgHexColor,
		&i.FgHexColor,
		&i.IsPublic,
	)
	return i, err
}

const listNetworks = `-- name: ListNetworks :many
SELECT id, owner_id, name, icon, bg_hex_color, fg_hex_color, is_public FROM networks
ORDER BY id
`

func (q *Queries) ListNetworks(ctx context.Context) ([]Network, error) {
	rows, err := q.db.QueryContext(ctx, listNetworks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Network
	for rows.Next() {
		var i Network
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Name,
			&i.Icon,
			&i.BgHexColor,
			&i.FgHexColor,
			&i.IsPublic,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
