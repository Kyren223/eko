// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: frequencies.sql

package data

import (
	"context"

	"github.com/kyren223/eko/pkg/snowflake"
)

const createFrequency = `-- name: CreateFrequency :one
INSERT INTO frequencies (
  id, network_id, name
) VALUES (
  ?, ?, ?
)
RETURNING id, network_id, name
`

type CreateFrequencyParams struct {
	ID        snowflake.ID
	NetworkID snowflake.ID
	Name      string
}

func (q *Queries) CreateFrequency(ctx context.Context, arg CreateFrequencyParams) (Frequency, error) {
	row := q.db.QueryRowContext(ctx, createFrequency, arg.ID, arg.NetworkID, arg.Name)
	var i Frequency
	err := row.Scan(&i.ID, &i.NetworkID, &i.Name)
	return i, err
}

const getNetworkFrequencies = `-- name: GetNetworkFrequencies :many
SELECT id, network_id, name FROM frequencies
WHERE network_id = ?
ORDER BY id
`

func (q *Queries) GetNetworkFrequencies(ctx context.Context, networkID snowflake.ID) ([]Frequency, error) {
	rows, err := q.db.QueryContext(ctx, getNetworkFrequencies, networkID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Frequency
	for rows.Next() {
		var i Frequency
		if err := rows.Scan(&i.ID, &i.NetworkID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
