// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package data

import (
	"context"

	"crypto/ed25519"
	"github.com/kyren223/eko/pkg/snowflake"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  id, name, public_key
) VALUES (
  ?, ?, ?
)
RETURNING id, name, public_key, description, is_public_dm, is_deleted
`

type CreateUserParams struct {
	ID        snowflake.ID
	Name      string
	PublicKey ed25519.PublicKey
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ID, arg.Name, arg.PublicKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PublicKey,
		&i.Description,
		&i.IsPublicDM,
		&i.IsDeleted,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users SET
  is_deleted = true
WHERE id = ? AND is_deleted = false
`

func (q *Queries) DeleteUser(ctx context.Context, id snowflake.ID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, public_key, description, is_public_dm, is_deleted FROM users
WHERE id = ? AND is_deleted = false
`

func (q *Queries) GetUserById(ctx context.Context, id snowflake.ID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PublicKey,
		&i.Description,
		&i.IsPublicDM,
		&i.IsDeleted,
	)
	return i, err
}

const getUserByPublicKey = `-- name: GetUserByPublicKey :one
SELECT id, name, public_key, description, is_public_dm, is_deleted FROM users
WHERE public_key = ? AND is_deleted = false
`

func (q *Queries) GetUserByPublicKey(ctx context.Context, publicKey ed25519.PublicKey) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByPublicKey, publicKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PublicKey,
		&i.Description,
		&i.IsPublicDM,
		&i.IsDeleted,
	)
	return i, err
}
